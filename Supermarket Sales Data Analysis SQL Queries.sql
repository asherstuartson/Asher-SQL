-- Create the Database using the statement below.
CREATE DATABASE SupermarketSales;

-- Ensure the table to be created is not already in the database
-- and if it is, delete it to create a new table with the same features.
DROP TABLE IF EXISTS FirstQuaterSalesData;

-- Create the table "FirstQuaterSalesData" to store supermarket sales data
CREATE TABLE FirstQuaterSalesData (
    InvoiceID varchar(100),
    Branch varchar(100),
    City varchar(100),
    CustomerType varchar(100),
    Gender varchar(100),
    ProductLine varchar(100),
    UnitPrice real,
    Quantity integer,
    Tax5Percent real,
    Total real,
    Date date,
    Time time,
    Payment varchar(100),
    Cogs real,
    GrossMarginPercentage real,
    GrossIncome real,
    Rating real
);

-- Importing the data from CSV file into "FirstQuaterSalesData" table
COPY FirstQuaterSalesData (
    InvoiceID,
    Branch,
    City,
    CustomerType,
    Gender,
    ProductLine,
    UnitPrice,
    Quantity,
    Tax5Percent,
    Total,
    Date,
    Time,
    Payment,
    Cogs,
    GrossMarginPercentage,
    GrossIncome,
    Rating
) FROM 'D:\SQL\Data Sets\My Projects\Easy\2. supermarket_sales.csv' DELIMITER ',' CSV HEADER;

-- Data description: Display all rows from the "FirstQuaterSalesData" table
SELECT * FROM FirstQuaterSalesData;

-- Finding Null Values: Use the WHERE clause that checks for NULL values in any of the columns.
SELECT * FROM FirstQuaterSalesData
WHERE InvoiceID IS NULL OR
      Branch IS NULL OR
      City IS NULL OR
      CustomerType IS NULL OR
      Gender IS NULL OR
      ProductLine IS NULL OR
      UnitPrice IS NULL OR
      Quantity IS NULL OR
      Tax5Percent IS NULL OR
      Total IS NULL OR
      Date IS NULL OR
      Time IS NULL OR
      Payment IS NULL OR
      Cogs IS NULL OR
      GrossMarginPercentage IS NULL OR
      GrossIncome IS NULL OR
      Rating IS NULL;

-- Find Male and Female contribution in supermarket sales data
-- Use the GROUP BY clause along with the COUNT function to calculate the contributions for both Male and Female customers.
SELECT 
    gender,
    COUNT(*) AS Contribution
FROM FirstQuaterSalesData
GROUP BY gender;

-- Return Customer Type by Gender
SELECT
    CustomerType,
    gender,
    COUNT(*) AS TotalCustGend
FROM FirstQuaterSalesData
GROUP BY CustomerType, gender
ORDER BY CustomerType, TotalCustGend DESC;

-- Find how much sales done by each city
SELECT
    Branch,
    City,
    SUM(Total) AS CityTotals
FROM FirstQuaterSalesData
GROUP BY Branch, City
ORDER BY CityTotals DESC;

-- Extract Month with highest sales
SELECT
    EXTRACT('Month' FROM Date) AS Month,
    SUM(Total) AS MonthTotals
FROM FirstQuaterSalesData
GROUP BY Month
ORDER BY MonthTotals DESC
LIMIT 1;

-- Find out which payment method customers using widely
-- Use the GROUP BY clause to group the data by payment method and COUNT(*) function counts the number of occurrences for each payment method.
SELECT 
    Payment,
    COUNT(*) AS UsageCount,
    SUM(Total) AS PayMethdTotals
FROM FirstQuaterSalesData
GROUP BY Payment
ORDER BY UsageCount DESC
LIMIT 1;

-- Find out how much profit generated by each City
-- Use the SUM function to calculate the profit for each city by subtracting the total Total from the total Cogs for that city. The GROUP BY clause groups the data by city, so you get the profit for each city separately.
SELECT 
    city,
    SUM(GrossIncome) AS IncomeByCity,
    SUM(Total - Cogs) AS Income
FROM FirstQuaterSalesData
GROUP BY city
ORDER BY IncomeByCity DESC;

-- Which branch has the best results in the loyalty program?
SELECT 
    Branch,
    AVG(Rating) AS AvgBranchRating
FROM FirstQuaterSalesData
GROUP BY Branch
ORDER BY AvgBranchRating DESC
LIMIT 1;

-- Does the rating depend on membership?
-- Use the GROUP BY clause to group the data by customer type to calculate the average rating for each customer type with AVG().
-- The HAVING clause checks if there is more than one distinct rating for each customer type. If there is more than one average rating value, and the query returns any rows, it indicates that there are differences in average customer ratings between different customer types, which suggests a potential dependency.
SELECT 
    CustomerType,
    AVG(rating) AS AveRating
FROM FirstQuaterSalesData
GROUP BY CustomerType
HAVING COUNT(DISTINCT rating) > 1;

-- Does gross income depend on the proportion of customers in the loyalty program?
-- Calculate the proportion of each customer type's gross income relative to the total gross income. If the proportions are significantly different between customer types, it may suggest a dependency.
-- Use a window function with SUM(SUM(gross_income)) OVER () to calculate the total gross income across all customer types, the proportion of each customer type's gross income relative to the total.
SELECT CustomerType,
       SUM(GrossIncome) AS TotalGrossIncome,
       SUM(GrossIncome) / SUM(SUM(GrossIncome)) OVER () AS proportion
FROM FirstQuaterSalesData
GROUP BY CustomerType;

-- Are there any differences in indicators between men and women?
-- Compare the values of specific columns for each gender group.
SELECT
   -- For Total,
    SUM(CASE WHEN gender = 'Male' THEN Total ELSE 0 END) AS male_total,
    SUM(CASE WHEN gender = 'Female' THEN Total ELSE 0 END) AS female_total,
    CASE WHEN SUM(CASE WHEN gender = 'Male' THEN Total ELSE 0 END) != SUM(CASE WHEN gender = 'Female' THEN Total ELSE 0 END) THEN 'Different' ELSE 'Same' END AS Total_difference,
    -- For Cogs,
    SUM(CASE WHEN gender = 'Male' THEN Cogs ELSE 0 END) AS male_total,
    SUM(CASE WHEN gender = 'Female' THEN Cogs ELSE 0 END) AS female_total,
    CASE WHEN SUM(CASE WHEN gender = 'Male' THEN Cogs ELSE 0 END) != SUM(CASE WHEN gender = 'Female' THEN Cogs ELSE 0 END) THEN 'Different' ELSE 'Same' END AS Cogs_difference,
    -- For GrossIncome,
    SUM(CASE WHEN gender = 'Male' THEN GrossIncome ELSE 0 END) AS male_total,
    SUM(CASE WHEN gender = 'Female' THEN GrossIncome ELSE 0 END) AS female_total,
    CASE WHEN SUM(CASE WHEN gender = 'Male' THEN GrossIncome ELSE 0 END) != SUM(CASE WHEN gender = 'Female' THEN GrossIncome ELSE 0 END) THEN 'Different' ELSE 'Same' END AS GrossIncome_difference,
	-- For Rating,
    AVG(CASE WHEN gender = 'Male' THEN Rating ELSE 0 END) AS male_total,
    AVG(CASE WHEN gender = 'Female' THEN Rating ELSE 0 END) AS female_total,
    CASE WHEN AVG(CASE WHEN gender = 'Male' THEN Rating ELSE 0 END) != AVG(CASE WHEN gender = 'Female' THEN Rating ELSE 0 END) THEN 'Different' ELSE 'Same' END AS Avg_Rating_difference
FROM FirstQuaterSalesData
WHERE gender IN ('Male', 'Female');

-- Differences between genders across different columns
-- We employ the use of subquery to shape the data to be able to stack vertically for each gender for the different indicators of interest
SELECT
    Indicators,
    MAX(CASE WHEN gender = 'Male' THEN value END) AS male_value,
    MAX(CASE WHEN gender = 'Female' THEN value END) AS female_value
FROM (
    SELECT 
		'UnitPrice' AS Indicators, 
		gender, 
		UnitPrice AS value 
	FROM FirstQuaterSalesData
    UNION ALL
    SELECT 
		'Quantity' AS Indicators, 
		gender, 
		SUM(Quantity) AS value 
	FROM FirstQuaterSalesData
	GROUP BY gender
    UNION ALL
    SELECT 
		'GrossIncome' AS Indicators, 
		gender, 
		SUM(GrossIncome) AS value 
	FROM FirstQuaterSalesData
	GROUP BY gender
	UNION ALL
	SELECT 
		'Rating' AS Indicators, 
		gender, 
		AVG(Rating) AS value 
	FROM FirstQuaterSalesData
	GROUP BY gender
	UNION ALL
	SELECT 
		'Total' AS Indicators, 
		gender, 
		SUM(Total) AS value 
	FROM FirstQuaterSalesData
	GROUP BY gender
    -- Add more UNION ALL clauses for additional columns as needed
) AS IndicatorsSource
GROUP BY Indicators
HAVING COUNT(DISTINCT value) > 1;


-- Which product category generates the highest income?
-- We group the data by distinct product line and calculate the sum of purchases for each product line.
SELECT DISTINCT
	ProductLine,
	SUM(GrossIncome) AS ProductLineIncome
FROM FirstQuaterSalesData
GROUP BY ProductLine
ORDER BY ProductLineIncome DESC
LIMIT 1;

-- Return which product line has the most purchases with gender
-- We group the data by gender and product line, then calculate the count of purchases for each combination.
SELECT
	Gender,
	ProductLine,
	COUNT(*) AS Purchase_Count
FROM FirstQuaterSalesData
WHERE gender IN ('Male', 'Female')
GROUP BY Gender, ProductLine
ORDER BY Purchase_Count DESC
LIMIT 2;

-- Return which product line has the most gross income with gender
SELECT
	Gender,
	ProductLine,
	SUM(GrossIncome) AS ProdGendIncome
FROM FirstQuaterSalesData
WHERE gender IN ('Male', 'Female')
GROUP BY Gender, ProductLine
ORDER BY ProdGendIncome DESC
LIMIT 2;

-- Return the highest purchased product line by the male and female genders.
-- To retrieve the highest purchased product line by males and females separately, 
-- we use a common table expression (CTE) and the ROW_NUMBER() window function. 
WITH RankedProductLines AS (
    SELECT
        gender,
        ProductLine,
        COUNT(*) AS PurchaseCount,
        ROW_NUMBER() OVER (PARTITION BY gender ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE gender IN ('Male', 'Female')
    GROUP BY gender, ProductLine
)
SELECT
    gender,
    ProductLine,
    PurchaseCount
FROM RankedProductLines
WHERE rank = 1;

-- OR 
-- To retrieve the highest purchased product line by males and females separately, 
-- we use a common table expression (CTE) and the RANK() window function. 
WITH RankedProductLines AS (
    SELECT
        gender,
        ProductLine,
        COUNT(*) AS purchase_count,
        RANK() OVER (PARTITION BY gender ORDER BY COUNT(*) DESC) AS ranking
    FROM FirstQuaterSalesData
    WHERE gender IN ('Male', 'Female')
    GROUP BY gender, ProductLine
)
SELECT
    gender,
    ProductLine,
    purchase_count
FROM RankedProductLines
WHERE ranking = 1;

-- Return the product line with the most gross income by genders
WITH RankedGenderByProductsIncome AS (
    SELECT
        gender,
        ProductLine,
        SUM(GrossIncome) AS ProdGendIncome,
        ROW_NUMBER() OVER (PARTITION BY gender ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE gender IN ('Male', 'Female')
    GROUP BY gender, ProductLine
    ORDER BY ProdGendIncome DESC
)
SELECT
    gender,
    ProductLine,
    ProdGendIncome
FROM RankedGenderByProductsIncome
WHERE rank = 1;

-- Return the highest purchased product line by CustomerType
WITH RankedProductsByCustTyp AS (
    SELECT
        CustomerType,
        ProductLine,
        COUNT(*) AS PurchaseCount,
        ROW_NUMBER() OVER (PARTITION BY CustomerType ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE CustomerType IN ('Member', 'Normal')
    GROUP BY CustomerType, ProductLine
)
SELECT
    CustomerType,
    ProductLine,
    PurchaseCount
FROM RankedProductsByCustTyp
WHERE rank = 1;

-- Return the highest purchased product line by city and branch
WITH RankedProductsByCity AS (
    SELECT
        Branch,
		City,
        ProductLine,
        COUNT(*) AS PurchaseCount,
        ROW_NUMBER() OVER (PARTITION BY City ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE City IN ('Mandalay', 'Naypyitaw', 'Yangon')
    GROUP BY Branch, City, ProductLine
    ORDER BY PurchaseCount DESC
)
SELECT
    Branch,
	City,
    ProductLine,
    PurchaseCount
FROM RankedProductsByCity
WHERE rank = 1;

-- Return most used payment method by gender
WITH RankedPaymentByGender AS (
    SELECT
        gender,
        Payment,
        COUNT(*) AS PaymentCount,
        ROW_NUMBER() OVER (PARTITION BY gender ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE gender IN ('Male', 'Female')
    GROUP BY gender, Payment
    ORDER BY PaymentCount DESC
)
SELECT
    gender,
    Payment,
    PaymentCount
FROM RankedPaymentByGender
WHERE rank = 1;

-- Return most used payment method by city and branch
WITH RankedPaymentByCity AS (
    SELECT
        Branch,
		City,
        Payment,
        COUNT(*) AS PaymentCount,
        ROW_NUMBER() OVER (PARTITION BY City ORDER BY COUNT(*) DESC) AS rank
    FROM FirstQuaterSalesData
    WHERE City IN ('Mandalay', 'Naypyitaw', 'Yangon')
    GROUP BY Branch, City, Payment
    ORDER BY PaymentCount DESC
)
SELECT
    Branch,
	City,
    Payment,
    PaymentCount
FROM RankedPaymentByCity
WHERE rank = 1;

-- Return most used payment method
-- To find the most used payment method, we make use of COUNT().
SELECT
    Payment,
    COUNT(*) AS UsageCount
FROM FirstQuaterSalesData
GROUP BY Payment
ORDER BY UsageCount DESC
LIMIT 1;